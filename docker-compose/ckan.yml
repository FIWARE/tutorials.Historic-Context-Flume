version: '3.5' 

services:
    # Orion is the context broker
  orion:
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - "${ORION_PORT}:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -noCache
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
  
  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
    healthcheck:
      test: curl --fail -s http://iot-agent:${IOTA_NORTH_PORT}/iot/about || exit 1

  # Tutorial acts as a series of dummy IoT Sensors over HTTP
  tutorial:
    image: fiware/tutorials.context-provider
    hostname: tutorial
    container_name: fiware-tutorial
    networks:
      default:
        aliases:
          - iot-sensors
          - context-provider
    expose:
      - "${TUTORIAL_APP_PORT}" # localhost:3000
      - "${TUTORIAL_DUMMY_DEVICE_PORT}" # localhost:3001
    ports:
      - "${TUTORIAL_APP_PORT}:${TUTORIAL_APP_PORT}" # localhost:3000
      - "${TUTORIAL_DUMMY_DEVICE_PORT}:${TUTORIAL_DUMMY_DEVICE_PORT}" # localhost:3001
    environment:
      - "MONGO_URL=mongodb://mongo-db:27017"
      - "DEBUG=tutorial:*"
      - "WEB_APP_PORT=${TUTORIAL_APP_PORT}" # Port used by the content provider proxy and web-app for viewing data
      - "IOTA_HTTP_HOST=iot-agent"
      - "IOTA_HTTP_PORT=${IOTA_SOUTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/d"
      - "DUMMY_DEVICES_PORT=${TUTORIAL_DUMMY_DEVICE_PORT}" # Port used by the dummy IOT devices to receive commands
      - "DUMMY_DEVICES_TRANSPORT=HTTP" # Default transport used by dummy IoT devices
      - "CONTEXT_BROKER=http://orion:${ORION_PORT}/v2" # URL of the context broker to update context
      - "NGSI_LD_PREFIX="
      - "OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>"
      - "TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>"
      - "TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>"



  # Databases
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017 # localhost:27017
    networks:
      - default
    command: --bind_ip_all --smallfiles
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    

  ckan:
    image: italia/ckan-it:2.6.8-2
    container_name: ckan
    hostname: ckan
    environment:
      - "CKAN_DEBUG=false"
      - "CKAN_SITE_URL=http://localhost:5000"
      - "CKAN_ADMIN_EMAIL=ckanadmin@mail.com"
      - "CKAN_ADMIN_USERNAME=ckanadmin"
      - "CKAN_ADMIN_PASSWORD=ckanpassword"
      - "CKAN_DB_HOST=db"
      - "CKAN_DB_PORT=5432"
      - "CKAN_DB_USER=ckan"
      - "PGPASSWORD=ckan"
      - "CKAN_SQLALCHEMY_URL=postgresql://ckan:ckan@db:5432/"
      - "CKAN_REDIS_HOST=redis"
      - "CKAN_REDIS_PORT=6379"
      - "CKAN_REDIS_URL=redis://redis:6379/"
      - "CKAN_SOLR_HOST=solr"
      - "CKAN_SOLR_PORT=8983"
      - "CKAN_SOLR_URL=http://solr:8983/solr/ckan"
    ports:
      - "5000:5000"
    networks:
      - default
    depends_on:
      - db
      - redis
      - solr
    volumes:
      - ckan-log:/var/log/ckan

  solr:
    image: italia/ckan-it-solr:2.3.0-1
    container_name: ckan-solr
    hostname: solr
    networks:
      - default
    ports:
      - "8983:8983"
    volumes:
      - solr-db:/opt/solr/server/solr/ckan/data

  redis:
    image: redis:5.0.5
    container_name: ckan-redis
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      - default

  db:
    image: ckan/postgresql:latest
    hostname: db
    container_name: ckan-postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - default
    environment:
      - "POSTGRES_PASSWORD=ckan"
      - "POSTGRES_USER=ckan"
      - "POSTGRES_DB=ckan"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres-db:/var/lib/postgresql/data


networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  postgres-db: ~
  solr-db: ~
  ckan-log: ~
  mongo-db: ~