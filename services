#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e

loadData () {
	sleep 2
	echo "Loading context data"
	./import-data
	echo "Provisioning IoT devices"
	./provision-devices
}


stoppingContainers () {
	echo "Stopping containers"
	docker-compose --log-level ERROR -f docker-compose/multiple.yml -p fiware down -v --remove-orphans
}

if (( $# != 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|mongodb|mysql|multiple|postgres|stop]"
    exit 1
fi

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|mongodb|mysql|multiple|postgres|stop]"
        ;;
    "multiple")
		stoppingContainers
		echo -e "Starting seven containers \033[1;34mOrion\033[0m, \033[1;34mCygnus\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;30mContext-Provider\033[0m and \033[1;30mMongoDB\033[0m, \033[1;30mPostgreSQL\033[0m and \033[1;30mMySQL\033[0m databases."
		echo -e "\033[1;34mOrion\033[0m is the context broker"
		echo -e "\033[1;34mCygnus\033[0m is configured to write context data to Mongo-DB, PostgeSQL and MySQL"
		echo -e "\033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "\033[1;30mContext-Provider\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo ""
		docker-compose --log-level ERROR -f docker-compose/multiple.yml -p fiware up -d --remove-orphans
		loadData
		;;
	 "mongodb")
		stoppingContainers
		echo -e "Starting five containers \033[1;34mOrion\033[0m, \033[1;34mCygnus\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;30mContext-Provider\033[0m and a \033[1;30mMongoDB\033[0m database."	
		echo -e "\033[1;34mOrion\033[0m is the context broker"
		echo -e "\033[1;34mCygnus\033[0m is configured to write context data to Mongo-DB only"
		echo -e "\033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "\033[1;30mContext-Provider\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo ""
		docker-compose --log-level ERROR -f docker-compose/mongodb.yml -p fiware up -d --remove-orphans
		loadData
		;;
    "postgres")
		stoppingContainers
		echo -e "Starting six containers \033[1;34mOrion\033[0m, \033[1;34mCygnus\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;30mContext-Provider\033[0m and \033[1;30mMongoDB\033[0m and \033[1;30mPostgreSQL\033[0m databases."
		echo -e "\033[1;34mOrion\033[0m is the context broker"
		echo -e "\033[1;34mCygnus\033[0m is configured to write context data to PostgreSQL only"
		echo -e "\033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "\033[1;30mContext-Provider\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo ""
		docker-compose --log-level ERROR -f docker-compose/postgres.yml -p fiware up -d --remove-orphans
		loadData
		;;
	"mysql")
		stoppingContainers
		echo -e "Starting six containers \033[1;34mOrion\033[0m, \033[1;34mCygnus\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;30mContext-Provider\033[0m and \033[1;30mMongoDB\033[0m and \033[1;30mMySQL\033[0m databases."
		echo -e "\033[1;34mOrion\033[0m is the context broker"
		echo -e "\033[1;34mCygnus\033[0m is configured to write context data to MySQL only"
		echo -e "\033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "\033[1;30mContext-Provider\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo ""
		docker-compose  -f docker-compose/mysql.yml -p fiware up -d --remove-orphans
		loadData
		;;
	"stop")
		stoppingContainers
		;;
	"create")
		echo "Obtaining Mongo DB image"
		docker pull mongo:3.6
		echo "Obtaining PostgreSQL DB image"
		docker pull postgres:latest
		echo "Obtaining MySQL DB image"
		docker pull mysql:5.7
		echo "Obtaining Latest Orion Image"
		docker pull fiware/orion
		echo "Obtaining Latest UltraLight IoT Agent"
		docker pull fiware/iotagent-ul
		echo "Obtaining Latest Cygnus"
		docker pull fiware/cygnus-ngsi
		echo "Recreate Context-Providers proxy"
		docker build -t fiware/cp-web-app ./proxy
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|mongodb|mysql|multiple|postgres|stop]"
		exit 127;
		;;
esac